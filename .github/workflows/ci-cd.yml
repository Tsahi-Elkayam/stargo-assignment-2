name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  DOCKER_IMAGE: bitcoin-exporter
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('exporter/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r exporter/requirements.txt
    
    - name: Run linting
      run: |
        flake8 exporter/src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 exporter/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=exporter/src --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} exporter/
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-exporter ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8000/metrics || exit 1
        docker stop test-exporter
    
    - name: Save Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:${{ github.sha }} | gzip > bitcoin-exporter.tar.gz
    
    - name: Upload Docker image artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: bitcoin-exporter.tar.gz
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=exporter/requirements.txt --severity-threshold=high
      continue-on-error: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Docker Hub
      if: github.event_name == 'release'
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
        docker build -t $DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:latest exporter/
        docker tag $DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:latest $DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}
        docker push $DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:latest
        docker push $DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}
    
    - name: Update Kubernetes Deployment
      if: github.event_name == 'release'
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/bitcoin-exporter bitcoin-exporter=$DOCKER_HUB_USERNAME/${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }} -n monitoring
        kubectl rollout status deployment/bitcoin-exporter -n monitoring
